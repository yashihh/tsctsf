/*
 * Ntsctsf_TimeSynchronization Service API
 *
 * TSCTSF Time Synchronization Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package producer

import (
	"net/http"

	"bitbucket.org/free5gc-team/openapi/models"
	"bitbucket.org/free5gc-team/util/httpwrapper"
	tsctsf_context "github.com/yashihh/tsctsf/internal/context"
	"github.com/yashihh/tsctsf/internal/logger"
	"github.com/yashihh/tsctsf/pkg/factory"
)

func HandleDeleteIndividualTimeSynchronizationExposureSubscription(subscriptionID string) *httpwrapper.Response {
	logger.TimeSyncSubLog.Infoln("Handle Delete Individual Time Synchronization Exposure Subscription Request")

	tsctsf_self := tsctsf_context.GetSelf()
	var appSessionID string
	found := false

	for key, value := range tsctsf_self.SubscripSession {
		if value == subscriptionID {
			appSessionID = key
			found = true
			break
		}
	}

	if found {
		delete(tsctsf_self.SubscripSession, appSessionID)

		for i, subscription := range factory.TsctsfConfig.Subscriptions {
			if subscription.SubscriptionId == subscriptionID {
				factory.TsctsfConfig.Subscriptions = append(factory.TsctsfConfig.Subscriptions[:i],
					factory.TsctsfConfig.Subscriptions[i+1:]...)
			}
		}
		logger.TimeSyncSubLog.Infoln("Delete Individual Time Synchronization Exposure Subscription Sucessfully.")
	} else {
		logger.TimeSyncSubLog.Warnf("No Subscription[%s] with Appsession[%s]", subscriptionID, appSessionID)
		problemDetails := &models.ProblemDetails{
			Status: http.StatusTemporaryRedirect,
			Cause:  "Temporary Redirect",
		}
		// TODO : (optional) add location for 307 Response Code
		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
	}
	return httpwrapper.NewResponse(http.StatusNoContent, nil, nil)
}

func HandleGetIndividualTimeSynchronizationExposureSubscription(subscriptionID string) *httpwrapper.Response {
	logger.TimeSyncSubLog.Infoln("Handle Get Individual Time Synchronization Exposure Subscription Request")

	for _, subscription := range factory.TsctsfConfig.Subscriptions {
		if subscription.SubscriptionId == subscriptionID {
			logger.TimeSyncSubLog.Debugf("SubscriptionData: %+v", subscription.SubscriptionData)

			// TODO : (optional) add location for 307 Response Code
			return httpwrapper.NewResponse(http.StatusOK, nil, subscription.SubscriptionData)
		}
	}
	logger.TimeSyncSubLog.Warnf("No Subscription ID[%s]", subscriptionID)
	problemDetails := &models.ProblemDetails{
		Status: http.StatusTemporaryRedirect,
		Cause:  "Temporary Redirect",
	}
	// TODO : (optional) add location for 307 Response Code
	return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)

}

func HandleReplaceIndividualTimeSynchronizationExposureSubscription(request *httpwrapper.Request) *httpwrapper.Response {
	logger.TimeSyncSubLog.Infoln("Handle Replace Individual Time Synchronization Exposure Subscription Request")
	timeSyncExpoSubscData := request.Body.(models.TimeSyncExposureSubsc)

	subscriptionID := request.Params["subscriptionId"]

	updatedSubscriptionData, problemDetails := TimeSyncExpoSubscModifyProcedure(timeSyncExpoSubscData, subscriptionID)
	if problemDetails != nil {
		return httpwrapper.NewResponse(int(problemDetails.Status), nil, problemDetails)
	} else {
		return httpwrapper.NewResponse(http.StatusOK, nil, updatedSubscriptionData)
	}
}
func TimeSyncExpoSubscModifyProcedure(timeSyncExpoSubscData models.TimeSyncExposureSubsc, subscriptionID string) (*models.TimeSyncExposureSubsc, *models.ProblemDetails) {
	for i, currentSubscription := range factory.TsctsfConfig.Subscriptions {
		if currentSubscription.SubscriptionId == subscriptionID {
			factory.TsctsfConfig.Subscriptions[i].SubscriptionData = &timeSyncExpoSubscData
			// TODO : (optional) add location for 307 Response Code
			return currentSubscription.SubscriptionData, nil
		}
	}
	logger.TimeSyncSubLog.Warnf("Update Subscription data of Subscription ID[%s] fail.", subscriptionID)

	problemDetails := &models.ProblemDetails{
		Status: http.StatusTemporaryRedirect,
		Cause:  "Temporary Redirect",
	}

	return nil, problemDetails
}
